package com.mhallman.skateshop.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.mhallman.skateshop.domain.Product;
import com.mhallman.skateshop.domain.Purchase;

public class PurchaseManager {


	/**
	 * Initialization of variables used in PurchaseManager class
	 */
	private PreparedStatement addPurchaseStmt;
	private PreparedStatement deleteAllPurchasesStmt;
	private PreparedStatement getAllPurchasesStmt;
	private dbConnect dbconn = new dbConnect();
	private Connection conn = dbconn.getConnection();
	private Statement statement;
	private ResultSet rs;
	private String createTablePurchase = "CREATE TABLE Purchase(id_purchase bigint GENERATED BY DEFAULT AS IDENTITY, id_client bigint, date varchar(10))";
	
	
	/**
	 * Basic constructor for ProductManager class
	 * - creates table Product if not exists
	 * - prepares statements 
	 */
	public PurchaseManager(){
		try {
			if(conn!=null){
				System.out.print("Connected to database\n");
			}
			rs = conn.getMetaData().getTables(null, null, null,null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Purchase".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists){
				statement = conn.createStatement();
				statement.executeUpdate(createTablePurchase);
			}

			addPurchaseStmt = conn.prepareStatement("INSERT INTO Purchase (id_client,date) VALUES (?, ?)");
			deleteAllPurchasesStmt = conn.prepareStatement("DELETE FROM Purchase");
			getAllPurchasesStmt = conn.prepareStatement("SELECT id_purchase, id_client,date FROM Purchase");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 
	 */
	public void deletePurchases(){
		try {
			deleteAllPurchasesStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @param product
	 * @return count
	 */
	public int addPurchase(Purchase purchase){
		int count=0;
		try {
			addPurchaseStmt.setLong(1, purchase.getId_client());
			addPurchaseStmt.setString(2, purchase.getDate());
			count=addPurchaseStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;	
	}
	
	/**
	 * 
	 * @return Products
	 */
	public List<Purchase> getAllPurchases(){
		ArrayList<Purchase> Purchases = new ArrayList<Purchase>();
		
		try {
			ResultSet rs = getAllPurchasesStmt.executeQuery();
			while(rs.next()){
				Purchase purchase = new Purchase();
				purchase.setId_client(rs.getInt("id_client"));
				purchase.setDate(rs.getString("date"));
				Purchases.add(purchase);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return Purchases;
		
		
	}
	
	
}
